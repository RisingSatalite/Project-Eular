#Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten pentagonal numbers are:
#1,5,12,22,35,51,70,92,117,145...

#It can be seen that P4+P7=22+70=92=P8. However, their difference, 70-22=48, is not pentagonal.

#Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D=|Pk-Pj| is minimised; what is the value of D?

import math

def pentagonal(n: int) -> int:
    """Return the nth pentagonal number."""
    return n * (3 * n - 1) // 2

def is_pentagonal(x: int) -> bool:
    """
    Return True iff x is a pentagonal number.
    Derived from: n = (1 + sqrt(1 + 24x)) / 6
    We avoid floating point by using integer square‑root.
    """
    s = 1 + 24 * x
    r = math.isqrt(s)               # integer sqrt
    return r * r == s and (1 + r) % 6 == 0

# ---------- Search -------------------------------------------------
MAX_N = 20000          # enough to reach the known solution
best_diff  = None
best_pair  = None

# Pre‑build a set of pentagonal numbers for quick membership tests
pent_set = {pentagonal(n) for n in range(1, MAX_N + 1)}

for j in range(2, MAX_N):
    pj = pentagonal(j)
    for i in range(1, j):
        pi = pentagonal(i)
        diff = pj - pi                # always positive because j > i
        ssum = pj + pi

        # Both difference and sum must be pentagonal
        if diff in pent_set and ssum in pent_set:
            if best_diff is None or diff < best_diff:
                best_diff = diff
                best_pair = (pi, pj)

# ---------- Result -----------------------------------------------
print("Minimal difference :", best_diff)
print("Pentagonal pair    :", best_pair)
