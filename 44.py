#Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten pentagonal numbers are:
#1,5,12,22,35,51,70,92,117,145...

#It can be seen that P4+P7=22+70=92=P8. However, their difference, 70-22=48, is not pentagonal.

#Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D=|Pk-Pj| is minimised; what is the value of D?
import math

# ------------------------------------------------------------------
#  Utility functions
# ------------------------------------------------------------------
def pentagonal(n: int) -> int:
    """Return the nth pentagonal number."""
    return n * (3 * n - 1) // 2

def is_pentagonal(x: int) -> bool:
    """Return True if x is a pentagonal number."""
    # n = (1 + sqrt(1 + 24x)) / 6
    sqrt_val = math.isqrt(1 + 24 * x)
    return (1 + sqrt_val) % 6 == 0

# ------------------------------------------------------------------
#  Main search
# ------------------------------------------------------------------
MAX_N = 20000          # enough to find the minimal difference
pent_set = set()       # store all generated pentagonal numbers
best_diff = None
best_pair = None

for j in range(1, MAX_N):
    pj = pentagonal(j)
    pent_set.add(pj)

    for i in range(1, j):
        pi = pentagonal(i)
        diff = pj - pi           # positive because j > i
        s = pj + pi

        if diff in pent_set and s in pent_set:
            if best_diff is None or diff < best_diff:
                best_diff = diff
                best_pair = (pi, pj)
                # We could break here if we only want the *first* minimal diff,
                # but we keep scanning to be sure there is no even smaller one.

print(f"Minimal difference: {best_diff}")
print(f"Pentagonal numbers: P={best_pair[0]}, Q={best_pair[1]}")
